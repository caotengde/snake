#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<iostream>
#include<list>
#include<string>
#include<ctime>
#include"jsoncpp/json.h"
using namespace std;
int n, m;
const int ME = 0;
const int OP = 1;
const int INF = 1e9;
const int maxn = 25;
const int dx[4] = { -1,0,1,0 };
const int dy[4] = { 0,1,0,-1 };
bool invalid[maxn][maxn];//如果不是0，那他是障碍物
int CBvis[2][maxn][maxn];//该势力能够占领此点所用的回合数
struct point
{
	int x, y;
	point() {

	}
	point(int _x, int _y)
	{
		x = _x;
		y = _y;
	}
};
point que[400];

//广度优先遍历所有点更改cbvis，

list<point> snake[2]; // 0表示自己的蛇，1表示对方的蛇
int possibleDire[10];
int posCount;
//本回合是否生长
bool whetherGrow(int num) 
{
	if (num <= 9) return true;
	if ((num - 9) % 3 == 0) return true;
	return false;
}
//删除蛇尾
void deleteEnd(int id)   
{
	snake[id].pop_back();
}
//编号为id的蛇朝向dire方向移动一步
void move(int id, int dire, int num)  
{
	point p = *(snake[id].begin());
	int x = p.x + dx[dire];
	int y = p.y + dy[dire];
	snake[id].push_front(point(x, y));
	if (!whetherGrow(num))
		deleteEnd(id);
}
//调试语句
void outputSnakeBody(int id)   
{
	cout << "Snake No." << id << endl;
	for (list<point>::iterator iter = snake[id].begin(); iter != snake[id].end(); ++iter)
		cout << iter->x << " " << iter->y << endl;
	cout << endl;
}
//判断(x,y)位置是否有蛇
bool isInBody(int x, int y)   
{
	for (int id = 0; id <= 1; id++)
		for (list<point>::iterator iter = snake[id].begin(); iter != snake[id].end(); ++iter)
			if (x == iter->x && y == iter->y)
				return true;
	return false;
}
//判断当前移动方向的下一格是否合法
bool validDirection(int x, int y)  
{
	if (x > n || y > m || x < 1 || y < 1) return false;
	if (invalid[x][y]) return false;
	if (isInBody(x, y)) return false;
	return true;
}
void bfsCB(int who, int x, int y) {
	int quehead = 0;
	int quetail = 0;
	que[quetail++] = point(x, y);
	CBvis[who][x][y] = 0;
	while (quetail != quehead) {
		point cur = que[quehead++];
		int x = cur.x;
		int y = cur.y;
		for (int i = 0; i < 4; i++) {
			int nextX = x + dx[i];
			int nextY = y + dy[i];
			if (CBvis[who][nextX][nextY] != INF)continue;
			if (validDirection(nextX, nextY)) {
				que[quetail++] = (point(nextX, nextY));
				CBvis[who][nextX][nextY] = CBvis[who][x][y] + 1;
			}
		}
	}
}
double judge(int x0, int y0, int x1, int y1) {
	for (int k = 0; k < 2; k++) {
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= m; j++) {
				CBvis[k][i][j] = INF;
			}
		}
	}
	bfsCB(0, x0, y0);
	bfsCB(1, x1, y1);

	int me = 1;
	int op = 1;
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			if (CBvis[ME][i][j] == INF && CBvis[OP][i][j] == INF)continue;
			if (CBvis[ME][i][j] < CBvis[OP][i][j]) {
				me++;
			}
			if (CBvis[ME][i][j] > CBvis[OP][i][j]) {
				op++;
			}
		}
	}

	return (me + 0.0) / (op + 0.0) - (op + 0.0) / (me + 0.0);
}
int main()
{
	memset(invalid, 0, sizeof(invalid));
	string str;
	string temp;
	while (getline(cin, temp))
		str += temp;
	Json::Reader reader;
	Json::Value input;
	reader.parse(str, input);
	n = input["requests"][(Json::Value::UInt) 0]["height"].asInt();  //棋盘高度
	m = input["requests"][(Json::Value::UInt) 0]["width"].asInt();   //棋盘宽度
	int x = input["requests"][(Json::Value::UInt) 0]["x"].asInt();  //读蛇初始化的信息
	if (x == 1)
	{
		snake[0].push_front(point(1, 1));
		snake[1].push_front(point(n, m));
	}
	else
	{
		snake[1].push_front(point(1, 1));
		snake[0].push_front(point(n, m));
	}
	//处理地图中的障碍物
	int obsCount = input["requests"][(Json::Value::UInt) 0]["obstacle"].size();
	for (int i = 0; i < obsCount; i++)
	{
		int ox = input["requests"][(Json::Value::UInt) 0]["obstacle"][(Json::Value::UInt) i]["x"].asInt();
		int oy = input["requests"][(Json::Value::UInt) 0]["obstacle"][(Json::Value::UInt) i]["y"].asInt();
		invalid[ox][oy] = 1;
	}

	//根据历史信息恢复现场
	int total = input["responses"].size();

	int dire;
	for (int i = 0; i < total; i++)
	{
		dire = input["responses"][i]["direction"].asInt();
		move(0, dire, i);

		dire = input["requests"][i + 1]["direction"].asInt();
		move(1, dire, i);
	}

	if (!whetherGrow(total+1)) // 本回合两条蛇生长
	{
		deleteEnd(0);
		deleteEnd(1);
	}

	for (int k = 0; k < 4; k++)
		if (validDirection(0, k))
			possibleDire[posCount++] = k;

	double data[4][4] = {0};
	for(int i = 0; i < 4; i++) 
		for(int j = 0; j < 4; j++)
			data[i][j] = -10000;
	point p1 = *(snake[0].begin());
	point p2 = *(snake[1].begin());
	int flag = 0;
	for (int i = 0; i < 4; i++)
		for (int j = 0; j < 4; j++)
		{
			int x1 = p1.x + dx[i];
			int y1 = p1.y + dy[i];
			int x2 = p2.x + dx[j];
			int y2 = p2.y + dy[j];
			if (validDirection(x2, y2))
			{
				flag++;
				if(validDirection(x1, y1))
				{
				data[i][j] = judge(x1, y1, x2, y2);
				}
			}	
		}
	int ans = -1;
	if (!flag) 
	{
		for (int k = 0; k < 4; k++)
		{
			int x1 = p1.x + dx[k];
			int y1 = p1.y + dy[k];
			if (validDirection(x1, y1))
				possibleDire[posCount++] = k;
		}
		ans = possibleDire[0];
	}
	else
	{
		double max = -INF;
		int maxmax= -1;
		for (int i = 0; i < 4; i++)
		{
			double num = 0;
			for (int j = 0; j < 4; j++) 
			{
				num += data[i][j];
			}
		
			if (num >= max) 
			{
				max = num;
				maxmax = i;
			}
		}
		ans = maxmax;
	}
	//随机做出一个决策
	Json::Value ret;
	ret["response"]["direction"] = ans;

	Json::FastWriter writer;
	cout << writer.write(ret) << endl;

	return 0;
}
/*{"requests":[{"height":13,"obstacle":[{"x":9,"y":1},{"x":5,"y":10},{"x":11,"y":1},{"x":3,"y":10},{"x":7,"y":3},{"x":7,"y":8},{"x":5,"y":5},{"x":9,"y":6},{"x":2,"y":1},{"x":12,"y":10},{"x":5,"y":1},{"x":9,"y":10}],"width":10,"x":1,"y":1},{"direction":3},{"direction":0},{"direction":0},{"direction":0},{"direction":0},{"direction":0},{"direction":0},{"direction":0},{"direction":0},{"direction":3},{"direction":0},{"direction":3},{"direction":0},{"direction":3},{"direction":3},{"direction":3},{"direction":3},{"direction":2},{"direction":2},{"direction":3},{"direction":0},{"direction":3},{"direction":0},{"direction":1},{"direction":0},{"direction":1},{"direction":1},{"direction":1},{"direction":1},{"direction":1},{"direction":2},{"direction":2},{"direction":2},{"direction":1},{"direction":1},{"direction":0},{"direction":0},{"direction":3},{"direction":0},{"direction":1},{"direction":1},{"direction":0},{"direction":3},{"direction":3},{"direction":3},{"direction":3},{"direction":3},{"direction":3},{"direction":3},{"direction":2},{"direction":2},{"direction":2},{"direction":2},{"direction":2},{"direction":1},{"direction":0},{"direction":0},{"direction":1},{"direction":1},{"direction":2},{"direction":2},{"direction":2},{"direction":2},{"direction":3},{"direction":2},{"direction":2},{"direction":3},{"direction":2},{"direction":1},{"direction":1},{"direction":0},{"direction":1},{"direction":1},{"direction":2},{"direction":3},{"direction":2},{"direction":3},{"direction":3}],"responses":[{"direction":1},{"direction":2},{"direction":2},{"direction":2},{"direction":1},{"direction":1},{"direction":1},{"direction":1},{"direction":2},{"direction":1},{"direction":2},{"direction":3},{"direction":3},{"direction":3},{"direction":3},{"direction":3},{"direction":3},{"direction":2},{"direction":2},{"direction":1},{"direction":2},{"direction":2},{"direction":2},{"direction":1},{"direction":1},{"direction":1},{"direction":1},{"direction":1},{"direction":0},{"direction":0},{"direction":0},{"direction":0},{"direction":0},{"direction":1},{"direction":1},{"direction":2},{"direction":2},{"direction":3},{"direction":2},{"direction":2},{"direction":2},{"direction":2},{"direction":3},{"direction":3},{"direction":3},{"direction":3},{"direction":3},{"direction":0},{"direction":0},{"direction":0},{"direction":0},{"direction":3},{"direction":2},{"direction":2},{"direction":2},{"direction":2},{"direction":3},{"direction":2},{"direction":1},{"direction":1},{"direction":1},{"direction":1},{"direction":1},{"direction":1},{"direction":1},{"direction":1},{"direction":0},{"direction":0},{"direction":0},{"direction":0},{"direction":3},{"direction":3},{"direction":0},{"direction":1},{"direction":1},{"direction":1},{"direction":0},{"direction":3}]}*/